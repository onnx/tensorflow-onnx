# This template generates multiple jobs based on input parameters

parameters:
  platforms: ['linux']
  python_versions: ['3.7']
  tf_versions: ['']
  onnx_versions: ['']
  onnx_opsets: ['17', '16', '15', '14', '13']
  onnx_backends: {onnxruntime: ['1.13.1']}
  job: {}
  run_setup: 'True'
  report_coverage: 'False'
  artifact_name: 'single_test_coverage'
  skip_tflite_tests: 'True'
  skip_tfjs_tests: 'True'
  skip_tf_tests: 'False'

jobs:
  - job: ${{ parameters.job.name }}
    timeoutInMinutes: 100
    pool:
        vmImage: $(CI_VM_IMAGE)

    # Generate matrix
    strategy:
      matrix:
        ${{ each platform in parameters.platforms }}:
          ${{ each python_version in parameters.python_versions }}:
            ${{ each tf_version in parameters.tf_versions }}:
              ${{ each onnx_version in parameters.onnx_versions }}:
                ${{ each onnx_backend in parameters.onnx_backends }}:
                  ${{ each onnx_backend_version in onnx_backend.value }}:
                    ${{ each onnx_opset in parameters.onnx_opsets }}:
                      ${{ format('{0} python{1}{2}{3} tf{4} onnx{5} {6}{7}{8}', platform, python_version, replace(replace(parameters.skip_tflite_tests,'True', ''), 'False', ' tflite'), replace(replace(parameters.skip_tfjs_tests,'True', ''), 'False', ' tfjs'), tf_version, onnx_version, replace(format('opset{0} ', onnx_opset), 'opset ', ''), onnx_backend.key, onnx_backend_version) }}:
                        ${{ if eq(platform, 'linux') }}:
                          CI_VM_IMAGE: 'ubuntu-latest'
                        ${{ if eq(platform, 'windows') }}:
                          CI_VM_IMAGE: 'windows-2019'
                        ${{ if eq(platform, 'mac') }}:
                          CI_VM_IMAGE: 'macOS-11'
                        CI_PLATFORM: '${{ platform }}'
                        CI_PYTHON_VERSION: '${{ python_version }}'
                        CI_TF_VERSION: '${{ tf_version }}'
                        CI_ONNX_VERSION: '${{ onnx_version }}'
                        ${{ if ne(onnx_opset, '') }}:
                          CI_ONNX_OPSET: '${{ onnx_opset }}'
                        CI_ONNX_BACKEND: '${{ onnx_backend.key }}'
                        CI_ONNX_BACKEND_VERSION: '${{ onnx_backend_version }}'
                        CI_SKIP_TF_TESTS: '${{ parameters.skip_tf_tests }}'
                        CI_SKIP_TFLITE_TESTS: '${{ parameters.skip_tflite_tests }}'
                        CI_SKIP_TFJS_TESTS: '${{ parameters.skip_tfjs_tests }}'

                        ${{ if eq(tf_version, '') }}:
                          CI_PIP_TF_NAME: 'tensorflow'
                        ${{ if ne(tf_version, '') }}:
                          CI_PIP_TF_NAME: ${{ format('tensorflow=={0}', tf_version) }}

                        ${{ if eq(onnx_version, '') }}:
                          CI_PIP_ONNX_NAME: 'onnx'
                        ${{ if ne(onnx_version, '') }}:
                          CI_PIP_ONNX_NAME: ${{ format('onnx=={0}', onnx_version) }}

                        ${{ if eq(onnx_backend_version, '') }}:
                          CI_PIP_ONNX_BACKEND_NAME: '${{ onnx_backend.key }}'
                        ${{ if ne(onnx_backend_version, '') }}:
                          ${{ if ne(onnx_backend_version, 'nightly') }}:
                            CI_PIP_ONNX_BACKEND_NAME: ${{ format('{0}=={1}', onnx_backend.key, onnx_backend_version) }}
                          ${{ if eq(onnx_backend_version, 'nightly') }}:
                            CI_PIP_ONNX_BACKEND_NAME: '${{ onnx_backend.key }}'
                            CI_ONNXRUNTIME_NIGHTLY: 'true'

    # Insert all properties other than pool/steps/strategy
    ${{ each pair in parameters.job }}:
      ${{ if not(in(pair.key, 'pool', 'steps', 'strategy')) }}:
        ${{ pair.key }}: ${{ pair.value }}

    steps:
    - bash: env
      displayName: 'Display Environment Variables'

# TODO: ordinary python is preferred but built-in python3.6 does not have libpython3.6m.so, onnxruntime will fail with
# Error: 'libpython3.6m.so.1.0: cannot open shared object file: No such file or directory'
# so have to use conda here, may switch back to UsePythonVersion when the issue is fixed.
#    - task: UsePythonVersion@0
#      inputs:
#        versionSpec: '$(CI_PYTHON_VERSION)'
#        architecture: 'x64'

# TODO: Conda Environment task is deprecating, move to raw python after issue above is fixed.
# https://github.com/Microsoft/azure-pipelines-tasks/pull/9573
    - task: CondaEnvironment@1
      inputs:
        createCustomEnvironment: 'true'
        environmentName: 'tf2onnx'
        packageSpecs: 'python=$(CI_PYTHON_VERSION)'
        updateConda: 'false'

    - ${{ if eq(parameters.run_setup, 'True') }}:
      - template: 'setup.yml'

    # Insert original steps
    - ${{ parameters.job.steps }}

    # Report and publish test coverage
    # Save source path for combining coverage cross platform
    - bash: |
        coverage report
        mv .coverage ${BUILD_ARTIFACTSTAGINGDIRECTORY}/.coverage.${CI_PLATFORM}_python${CI_PYTHON_VERSION}_tf${CI_TF_VERSION}_onnx${CI_ONNX_VERSION}_${CI_ONNX_BACKEND}${CI_ONNX_VERSION}
        echo "  ${SYSTEM_DEFAULTWORKINGDIRECTORY}" > ${BUILD_ARTIFACTSTAGINGDIRECTORY}/.coveragerc_paths.${CI_PLATFORM}_python${CI_PYTHON_VERSION}_tf${CI_TF_VERSION}_onnx${CI_ONNX_VERSION}_${CI_ONNX_BACKEND}${CI_ONNX_VERSION}
      condition: and(succeededOrFailed(), eq(${{ parameters.report_coverage }}, 'True'))
      displayName: 'Report Single Test Coverage'

    - task: PublishBuildArtifacts@1
      condition: succeeded()
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '${{ parameters.artifact_name }}'
      displayName: 'Deploy Single Test Coverage'
