# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license.
""" tf2onnx mapping functions for onnx domain. """

from tf2onnx.function import *  # pylint: disable=wildcard-import
from .functions import *  # pylint: disable=wildcard-import

# map tensorflow ops to onnx ops. The format below is
# "TFOP": func_to_map, ["OnnxOp", ...]
_OPSET_4 = {
    "Abs": (direct_op, []),
    "Add": (broadcast_op, []),
    "ArgMax": (arg_minmax_op, []),
    "ArgMin": (arg_minmax_op, []),
    "AvgPool": (pool_op, ["AveragePool"]),
    "AvgPool3D": (pool_op, ["AveragePool"]),
    "BiasAdd": (biasadd_op, []),
    "BiasAddV1": (biasadd_op, []),
    "Cast": (cast_op, []),
    "Concat": (concat_op, ["Concat"]),
    "ConcatV2": (concatv2_op, ["Concat"]),
    "Const": (direct_op, []),
    "ConstV2": (direct_op, []),
    "Conv2D": (conv_op, ["Conv"]),
    "Conv2DBackpropInput": (convtranspose_op, ["ConvTranspose"]),
    "Conv3D": (conv_op, ["Conv"]),
    "Equal": (broadcast_op, []),
    "ExpandDims": (expanddims_op, []),
    "DepthwiseConv2d": (depthwiseconv_op, ["Conv"]),
    "DepthwiseConv2dNative": (depthwiseconv_op, ["Conv"]),
    "Dropout": (direct_op, []),
    "Elu": (direct_op, []),
    "Exp": (direct_op, []),
    "Floor": (direct_op, []),
    "Flatten": (direct_op, []),
    "Gather": (direct_op, ["Gather"]),
    "GatherV2": (gatherv2_op, ["Gather"]),
    "GatherNd": (gathernd_op, ["GatherNd"]),
    "Greater": (broadcast_op, []),
    "Identity": (identity_op, ["Identity"]),
    "Less": (broadcast_op, []),
    "Log": (direct_op, []),
    "LogSoftmax": (direct_op, ["LogSoftmax"]),
    "LRN": (lrn_op, []),
    "LSTMBlockCell": (lstm_block_cell_op, []),
    "LogicalAnd": (broadcast_op, ["And"]),
    "LogicalNot": (direct_op, ["Not"]),
    "LogicalOr": (broadcast_op, ["Or"]),
    "Max": (reduce_op, ["ReduceMax"]),
    "MatMul": (matmul_op, ["MatMul"]),
    "BatchMatMul": (matmul_op, ["MatMul"]),
    "Maximum": (minmax_op, ["Max"]),
    "MaxPool": (pool_op, ["MaxPool"]),
    "MaxPoolV2": (pool_op, ["MaxPool"]),
    "Mean": (reduce_op, ["ReduceMean"]),
    "Min": (reduce_op, ["ReduceMin"]),
    "Minimum": (minmax_op, ["Min"]),
    "MirrorPad": (pad_op, ["Pad"]),
    "Mul": (broadcast_op, []),
    "Neg": (direct_op, []),
    "NoOp": (no_op, []),
    "NotEqual": (direct_op, ["Not"]),
    "Pad": (pad_op, []),
    "PadV2": (pad_op, ["Pad"]),
    "Placeholder": (direct_op, []),
    "PlaceholderV2": (direct_op, []),
    "PlaceholderWithDefault": (direct_op, []),
    "Pow": (pow_op, []),
    "Prod": (reduce_op, ["ReduceProd"]),
    "RandomNormal": (direct_op, []),
    "RandomUniform": (direct_op, []),
    "RandomNormalLike": (direct_op, []),
    "RandomUniformLike": (direct_op, []),
    "RealDiv": (broadcast_op, ["Div"]),
    "Reciprocal": (direct_op, []),
    "Relu": (direct_op, ["Relu"]),
    "Relu6": (relu6_op, []),
    "Reshape": (reshape_op, ["Reshape"]),
    "Rsqrt": (rsqrt_op, []),
    "Shape": (shape_op, []),
    "Size": (direct_op, []),
    "Sigmoid": (direct_op, []),
    "Slice": (slice_op, []),
    "Split": (split_op, ["Split"]),
    "SplitV": (splitv_op, ["Split"]),
    "Squeeze": (squeeze_op, []),
    "Sqrt": (direct_op, []),
    "Square": (square_op, []),
    "SquaredDifference": (squareddifference_op, []),
    "Softmax": (softmax_op, ["Softmax"]),
    "StopGradient": (identity_op, ["Identity"]),
    "StridedSlice": (stridedslice_op, []),
    "Sub": (broadcast_op, []),
    "Sum": (reduce_op, ["ReduceSum"]),
    "Tanh": (direct_op, []),
    "Transpose": (transpose_op, []),
    "TopKV2": (topk_op, []),
    "SpaceToDepth": (reorganize_data_op, []),
    "DepthToSpace": (reorganize_data_op, []),
    "Pack": (pack_op, []),
    "Unpack": (unpack_op, []),
    "Erf": (erf_op, []),
    "Sign": (sign_op4, []),
    "ZerosLike": (zeroslike_op, []),
}

_OPSET_5 = {
    "ExpandDims": (expanddims_op7, []),
    "OneHot": (onehot_op, []),
    "Reshape": (reshape_op5, []),
    "SparseSoftmaxCrossEntropyWithLogits": (sparse_softmax_cross_entropy_with_logits_op, [])
}

_OPSET_6 = {
    "AddN": (direct_op, ["Sum"]),
    "All": (reduce_logic_op, []),
    "Any": (reduce_logic_op, []),
    "FloorDiv": (floordiv_op, []),
}

_OPSET_7 = {
    "Acos": (direct_op, []),
    "Add": (broadcast_op7, []),
    "Asin": (direct_op, []),
    "Atan": (direct_op, []),
    "BiasAdd": (biasadd_op7, []),
    "BiasAddV1": (biasadd_op7, []),
    "Cast": (direct_op, []),
    "Cos": (direct_op, []),
    "Div": (broadcast_op7, ["Div"]),
    "Equal": (broadcast_op7, []),
    "Fill": (fill_op7, []),
    "FloorMod": (floormod_op, []),
    "FusedBatchNorm": (fused_batchnorm_op7, []),
    "FusedBatchNormV2": (fused_batchnorm_op7, []),
    "Greater": (logical_compare_op, []),
    "Less": (logical_compare_op, []),
    "GreaterEqual": (logical_compareeq_op, ["Less"]),
    "LessEqual": (logical_compareeq_op, ["Greater"]),
    "LogicalAnd": (broadcast_op7, ["And"]),
    "LogicalOr": (broadcast_op7, ["Or"]),
    "MatrixBandPart": (matrixbandpart_op, []),
    "Mul": (broadcast_op7, []),
    "Multinomial": (multinomial_op, []),
    "Pow": (direct_op, []),
    "Range": (range_op7, []),
    "RealDiv": (broadcast_op7, ["Div"]),
    "ResizeBilinear": (upsample_op7, ["Upsample", "linear"]),
    "ResizeNearestNeighbor": (upsample_op7, ["Upsample", "nearest"]),
    "Sin": (direct_op, []),
    "Sub": (broadcast_op7, []),
    "Tan": (direct_op, []),
    "Tile": (tile_op7, []),
    "TruncateDiv": (broadcast_op7, ["Div"]),

    # workaround created ONNX node in pre-rewriters to make sure those ops
    # is handled especially on their contained subgraphs.
    "If": (direct_op, []),
    "Loop": (direct_op, []),
    "Scan": (direct_op, []),
}

_OPSET_8 = {
    "ReverseSequence": (reverse_op8, []),  # make use of scan
    "Select": (select_op8, []),
}

_OPSET_9 = {
    "Acosh": (direct_op, []),
    "Asinh": (direct_op, []),
    "Atanh": (direct_op, []),
    "Cosh": (direct_op, []),
    "Erf": (direct_op, []),
    "Fill": (fill_op, []),
    "IsNan": (direct_op, ["IsNaN"]),
    "ResizeBilinear": (upsample_op9, ["Upsample", "linear"]),
    "ResizeNearestNeighbor": (upsample_op9, ["Upsample", "nearest"]),
    "ReverseSequence": (reverse_op9, []),
    "Sign": (sign_op9, []),
    "Sinh": (direct_op, []),
    "Where": (where_op, []),
}

OPSETS = [
    (4, _OPSET_4),
    (5, _OPSET_5),
    (6, _OPSET_6),
    (7, _OPSET_7),
    (8, _OPSET_8),
    (9, _OPSET_9),
]
